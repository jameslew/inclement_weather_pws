/**
 *  Weather Monitor PWS
 *
 *  Author: Jim Lewallen
 *  Date: 2015-06-16
 */

definition(
    name: "Weather Monitor PWS",
    namespace: "jameslew",
    author: "jameslew@live.com",
    description: "Integrating a Personal Weather Station into SmartThings via Davis Weather API",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience%402x.png"
)
{
    appSetting "weatherlink_device_id"
    appSetting "weatherlink_password"
    appSetting "weatherlink_api_token"
}

preferences {
	section ("Weather threshholds to alert at..."){
    	input "highwindspeed", "number", title: "Avg Wind Speed (MPH)", required: false, defaultValue: 10
    	input "highwindgust", "number", title: "High Wind Gust (MPH)", required: false, defaultValue: 18
    	input "hightempf", "number", title: "High Temperature (Deg F)", required: false, defaultValue: 85
    	input "lowtempf", "number", title: "Low Temperature (Deg F)", required: false, defaultValue: 37
    	input "highrainfall", "number", title: "Rainfall Threshhold (Inches)", required: false, defaultValue: 1.0   
    }
	section ("In addition to push notifications, send text alerts to...") {
		input "phone1", "phone", title: "Phone Number 1", required: false
		input "phone2", "phone", title: "Phone Number 2", required: false
		input "phone3", "phone", title: "Phone Number 3", required: false
	}
	section ("Custom Alert Messages") {
		input "warmmsg", "text", description: "Its hot at the weather station ", title: "Too Hot Message", required: false, defaultValue: "Its hot at the weather station "
		input "coldmsg", "text", description: "Its cold at the weather station ", title: "Too Cold Message", required: false, defaultValue: "Its cold at the weather station "
		input "windymsg", "text", description: "Its windy at the weather station ", title: "Windy Message", required: false, defaultValue: "Its windy at the weather station "
		input "gustymsg", "text", description: "Whoa that was a gust... ", title: "Wind Gust Message", required: false, defaultValue: "Whoa that was a gust... "
		input "wetmsg", "text", description: "Its really wet out ", title: "Wet Message", required: false, defaultValue: "Its really wet out "
	}
}

def installed() {
	log.debug "Installed with settings: ${appSettings}"
	setDefaultWeather()
    runIn(5, "checkWeather")
	runEvery5Minutes("checkWeather") //Check at top and half-past of every hour
    schedule("0 0 5,16 * * ?", "setDefaultWeather") //Reset in the morning
}

def updated() {
	log.debug "Updated with settings: ${appSettings}"
    setDefaultWeather()
    runIn(5, "checkWeather")
	runEvery5Minutes("checkWeather") //Check at top and half-past of every hour
    schedule("0 0 5,16 * * ?", "setDefaultWeather") //Reset in the morning
}

def checkWeather() {
    def weather

    try {
    	log.debug "https://api.weatherlink.com/v1/NoaaExt.json?user=${appSettings.weatherlink_device_id}&pass=${appSettings.weatherlink_password}&apiToken=${appSettings.weatherlink_api_token}"
        httpGet("https://api.weatherlink.com/v1/NoaaExt.json?user=${appSettings.weatherlink_device_id}&pass=${appSettings.weatherlink_password}&apiToken=${appSettings.weatherlink_api_token}") { resp ->
            resp.headers.each {
            log.debug "${it.name} : ${it.value}"
        }
        //log.debug "response contentType: ${resp.contentType}"
        //log.debug "response data: ${resp.data}"
        weather = resp.data
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    //log.debug "got weather: ${weather}"
    
    // Check if the variable is populated, otherwise return.
    if (!weather) {
        log.debug "Something went wrong, no data found." 
        return false
    }
    
    log.debug "setting params"
    
    def windspeed = Float.parseFloat(weather.wind_mph)
    def tempf = Float.parseFloat(weather.temp_f)
    def hourlyprecip
    if(weather.davis_current_observation.rain_rate_in_per_hour!=null)
    {
    	hourlyprecip = Float.parseFloat(weather.davis_current_observation.rain_rate_in_per_hour)
    } else
    {
    	hourlyprecip = 0.0
    }
    def windguststr = Float.parseFloat(weather.davis_current_observation.wind_ten_min_gust_mph)
    def windgust = 0.0
     
    log.debug "params set"
     
    try {
     	windgust = Float.parseFloat(weather.davis_current_observation.wind_ten_min_gust_mph)
    }
    catch ( e ) 
    { 
    	windgust = 0.0 
    }
	
    log.debug "Actual: ${windspeed}, ${tempf}, ${hourlyprecip}, ${windgust}"
    log.debug "Threshholds: ${highwindspeed}, ${hightempf}, ${lowtempf}, ${hourlyprecip}, ${highwindgust}"
    log.debug "State: ${state.lastHighWindSpeed}, ${state.lasthightempf}, ${state.lastlowtempf}, ${state.lasthourlyprecip}, ${state.lasthighwindgust}"
	log.debug "${settings.windymsg} ${settings.warmmsg} ${settings.coldmsg} ${settings.wetmsg} ${settings.gustymsg}"
   
    if ((float) windspeed > highwindspeed) {
		state.lastHighWindSpeed = windspeed
  		notifyPeople("${settings.windymsg} ${windspeed}", state.lasthighwindspeedreport)
        state.lasthighwindspeedreport = now()
    } else { state.lastHighWindSpeed = windspeed }

	if ((float) windgust > highwindgust) {
        state.lasthighwindgust = windgust
        notifyPeople("${settings.gustymsg} ${windgust}", state.lasthighwindgustreport) 
        state.lasthighwindgustreport = now()
    } else { state.lasthighwindgust = windgust }
   
    if ((float) tempf > hightempf) {
        if (tempf >= state.lasthightempf + 2.0 ) {
            state.lasthightempf = tempf
            notifyPeople("${settings.warmmsg} ${tempf}F", state.lasthightempreport)
            state.lasthightempreport = now()
        } else {log.debug "not enough high temp change"}
    } else { state.lasthightempf = tempf }

    if (tempf < lowtempf) {
        if (tempf <= state.lastlowtempf - 2.0 && tempf > -100.00 ) {
            state.lastlowtempf = tempf
            notifyPeople("${settings.coldmsg} ${tempf}F", state.lastlowtempreport)
            state.lastlowtempreport = now()
        } else { log.debug "not enough low temp change" }
    } else { state.lastlowtempf = tempf }
     
    if (hourlyprecip > highrainfall) {
        if (hourlyprecip  >= state.lasthourlyprecip + 1.0 ) {
            state.lasthourlyprecip = hourlyprecip 
            notifyPeople("${settings.wetmsg} ${hourlyprecip}in.", state.lasthighprecipreport)
            state.lasthighprecipreport = now()
        } else {log.debug "not enough precip change"}
    } else { state.lasthourlyprecip = hourlyprecip }
}

def calculateTimeDelta(reportTimeStamp) {
    	        
    	def timeDiff = Math.abs(now()-reportTimeStamp)
    	timeDiff = Math.round(timeDiff/(1000*60))
    
        log.debug "Last Report: ${reportTimeStamp}, Time since last report: ${timeDiff}"
        return timeDiff
}

def setDefaultWeather() {
    state.lastHighWindSpeed = 0.0
    state.lasthighwindgust = 0.0
    state.lasthightempf = 65.0
    state.lastlowtempf = 55.0
    state.lasthourlyprecip = 0.0
    
    state.lasthightempreport = now() - (15*1000*60)
    state.lasthighwindspeedreport = now() - (15*1000*60)
    state.lastlowtempreport = now() - (15*1000*60)
    state.lasthighprecipreport = now() - (15*1000*60)
    state.lasthighwindgustreport = now() - (15*1000*60)
    
	log.debug "Resetting weather state values"
}

private notifyPeople(message, lastReport) {

    def t0 = new Date(now() - (8 * 60 * 60 * 1000))
	def h0 = t0.getHours()

	def lastReportInterval = calculateTimeDelta(lastReport)
    if ( lastReportInterval < 30)
    {
    	log.debug "Too soon, less than 15 minutes: ${lastReportInterval}"
        return
	}

	if (h0 >= 6 && h0 <= 24)
    {
        log.debug "Weather event to be reported: ${message}"
        send(message)
    } else {
    	log.debug "Swallowing notification during off hours: ${t0.getHours()}"
    }
}

private send(message) {
	sendPush (message)
	if (settings.phone1) {
		sendSms phone1, message
	}
	if (settings.phone2) {
		sendSms phone2, message
	}
	if (settings.phone3) {
		sendSms phone3, message
	}
}
